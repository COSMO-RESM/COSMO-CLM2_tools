# Created 2019-03-20 Wed 17:37
#+TITLE: COSMO_CLM^2 tools
#+AUTHOR: Matthieu Leclair
#+export_file_name: README
#+startup: overview

* Description
This utility enables the automated creation and run of COSMO_CLM^2
simulations. It is written in Python3, with some automatically
generated bash scripts for interaction with scheduling systems, and
with a view to be extensible to different machines (so far Piz Daint
at CSCS and Mistral at DKRZ are supported).

The utility provides essentially one command, =cc2_create_case=,
which builds a case in a dedicated directory based on the user's
input provided either through command line arguments or an xml setup
file. During case creation, the following steps occur:
- all necessary files (input data files, executables and potentially
  modified namelists) are transfered to the case directory or placed
  in a subdirectory according to namelists specifications when
  needed. Based on the user's specifications, either whole of the
  input data or only the part needed for the first chunk of the
  simulation (for long simulation needing restarts) is getting
  transferred.
- bash job scripts are created for running, transferring input data
  and archiving output files.
- case properties not stored in namelists (e.g. length of chunks,
  archiving options, run/transfer status etc) are written to a local
  xml configuration file (not ot be confused with the user's xml
  setup file)

The first run job is then submitted and run, transfer and archive
jobs are subsequently organized as represented on the following
chart.

#+caption: Schematics of jobs organization
#+name: fig:jobs_organization
[[submit_sync.svg]]

* Install
You can now install either for python 2 or 3 (python3 recommanded as
python2 compatibility might not be ensured in thhe future) and
without cloning and installing manually
- Install COSMO_CLM2_tools
  #+begin_src shell
    module load cray-python/3.6.5.1
    pip3 install --user git+https://github.com/COSMO-RESM/COSMO_CLM2_tools.git
  #+end_src
  use ~--upgrade~ for later updates
  #+begin_src shell
    module load cray-python/3.6.5.1
    pip3 install --user --upgrade git+https://github.com/COSMO-RESM/COSMO_CLM2_tools.git
  #+end_src
- Make sure =~/.local/bin= is in your path

* Usage
In this section we explain in more details how to use the
utility. As mentionned in the desciption section, it mostly provides
the ~cc2_create_case~ command to the user. ~cc2_control_case~ is
also provided but is mostly usefull for the utility itself. Note
that ~cc2_compile_clm~ is also provided to flexibly compile the
Commnity Land Model. It is independant from running a COSMO_CLM^2
simulation and is decribed later.

** How to provide user's specifications
The first thing to describe is how users specifications are
provided to the ~cc2_create_case~ command. Almost all options can
be passed either by command line arguments or read from an xml
setup file. The later is given by the ~-s, --setup_file~ option.
The overall idea is that the user can store the most "stable"
options in the setup file and try other options by directly
providing them to the command line. It's anyways up to the user to
make use of this flexibility keeping in mind that *any option
provided through the command line has precedence over its setup
file counterpart*. As exemplified bellow, options are grouped under
different nodes in the xml setup file:
- the ~machine~ node containing only the machine name. This is
  subject to change and might eventually move to the ~main~ node
- the ~main~ node contains machine-independent options
- machine specific options are stored under the node named after
  the machine
The command line help ~cc2_create_case --help~ also displays
options following a similar structure.

#+NAME example_setup_file
#+CAPTION example xml setup file
#+begin_src nxml
  <?xml version="1.0" encoding="utf-8"?>
  <setup>
    <machine></machine>
    <main>
      <name>COSMO_CLM2</name>
      <install_dir></install_dir>
      <archive_dir></archive_dir>
      <cosmo_only></cosmo_only>
      <start_date></start_date>
      <end_date></end_date>
      <run_length></run_length>
      <cos_in>./COSMO_input</cos_in>
      <cos_nml>./COSMO_nml</cos_nml>
      <cos_exe>./cosmo</cos_exe>
      <cesm_in>./CESM_input</cesm_in>
      <cesm_nml>./CESM_nml</cesm_nml>
      <cesm_exe>./cesm.exe</cesm_exe>
      <oas_in>./OASIS_input</oas_in>
      <oas_nml>./OASIS_nml</oas_nml>
      <ncosx type="int"></ncosx>
      <ncosy type="int"></ncosy>
      <ncosio type="int"></ncosio>
      <ncesm type="int"></ncesm>
      <gpu_mode type="py_eval">False</gpu_mode>
      <dummy_day type="py_eval">False</dummy_day>
      <transfer_all type="py_eval">False</transfer_all>
      <input_type>file</input_type>
    </main>
    <daint>
      <account></account>
      <partition></partition>
      <modules_opt>switch</modules_opt>
      <pgi_version></pgi_version>
      <shebang>#!/bin/bash</shebang>
      <run_time>24:00:00</run_time>
      <transfer_time>02:00:00</transfer_time>
      <archive_time>03:00:00</archive_time>
    </daint>
    <mistral>
      <account></account>
      <partition></partition>
      <run_time>10:00:00</run_time>
    </mistral>
  </setup>
#+end_src

** Basic options
- =-s, --setup_file= path to the xml setup file. Beware that all
  relative paths provided in the setup file or directly to the
  command line are relative to where the ~cc2_create_case~ command
  gets executed.
- =machine= specify the machine name. It has to be given either by
  the command line or the in the setup file, i.e. there's no
  default value

** Case dates and restarts

** Case input : data, namelists and executables

** Transfer of input data during simulation

** Archiving

** Other machine-independent options

** Daint specific options

** Mistral specific options

* Development
