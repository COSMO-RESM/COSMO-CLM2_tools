# Created 2019-03-06 Wed 17:34
#+TITLE: COSMO_CLM^2 simulation setup tools
#+AUTHOR: Matthieu Leclair
#+export_file_name: README
#+startup: overview

Tools for automated creation and run of COSMO_CLM2 simulations

* Install
You can now install either for python 2 or 3 (python3 recommanded as
python2 compatibility might not be ensured in thhe future) and
without cloning and installing manually
- Install COSMO_CLM2_tools
  #+begin_src shell
    module load cray-python/3.6.5.1
    pip3 install --user git+https://github.com/COSMO-RESM/COSMO_CLM2_tools.git
  #+end_src
  use ~--upgrade~ for later updates
  #+begin_src shell
    module load cray-python/3.6.5.1
    pip3 install --user --upgrade git+https://github.com/COSMO-RESM/COSMO_CLM2_tools.git
  #+end_src
- Make sure =~/.local/bin= is in your path

* Usage
More comprehensive help will come. Essentially the tool provides
the cc2_create_case command. This is the result of =cc2_create_case
  --help=:
#+begin_src text
  usage: cc2_create_case [-h] [-s FILE] [--machine MACH] [--name NAME]
                         [--install_dir INSTALL_DIR] [--archive_dir ARCHIVE_DIR]
                         [--cosmo_only COSMO_ONLY] [--start_date DATE_1]
                         [--end_date DATE_2] [--run_length dt] [--cos_in COS_IN]
                         [--cos_nml COS_NML] [--cos_exe COS_EXE]
                         [--cesm_in CESM_IN] [--cesm_nml CESM_NML]
                         [--cesm_exe CESM_EXE] [--oas_in OAS_IN]
                         [--oas_nml OAS_NML] [--ncosx NCOSX] [--ncosy NCOSY]
                         [--ncosio NCOSIO] [--ncesm NCESM] [--gpu_mode GPU_MODE]
                         [--dummy_day DUMMY_DAY] [--input_type {file,symlink}]
                         [--transfer_all TRANSFER_ALL] [--run_time RUN_TIME]
                         [--transfer_time TRANSFER_TIME]
                         [--archive_time ARCHIVE_TIME] [--account ACCOUNT]
                         [--partition PARTITION]
                         [--modules_opt {switch,none,purge}]
                         [--pgi_version PGI_VERSION] [--shebang SHEBANG]
                         [--archive_per_month ARCHIVE_PER_MONTH]
                         [--archive_compression {none,gzip,bzip2}] [--no_submit]
                         [--gen_oasis]

  Set up and run a COSMO_CLM2 case
  --------------------------------
  Options can be set up either by xml file or the following command line arguments.
  xml file options must be stored in a subelement of the root element tagged with 'main'.
  and/or the specific machine (see [1]).
  Command line arguments have precedence over xml file ones.
  [1] https://github.com/COSMO-RESM/COSMO_CLM2_tools/blob/master/COSMO_CLM2_tools/example_setup.xml

  optional arguments:
    -h, --help            show this help message and exit
    -s FILE, --setup-file FILE
                          xml file conatining setup options
    --machine MACH        machine on which the case is running (default: has to be given 
                          either by the command line or the xml setup file)

  main:
    Case options common to all machines

    --name NAME           case name (default: COSMO_CLM2)
    --install_dir INSTALL_DIR
                          directory where the case is installed (default: $SCRATCH on daint)
    --archive_dir ARCHIVE_DIR
                          directory where output and restart files are archived (default: None)
    --cosmo_only COSMO_ONLY
                          run only cosmo with build-in soil model TERRA
                          (type: bool, using anything Python can parse as a boolean, default: False)
                          Be carefull to provide a COSMO executable compiled accordingly
    --start_date DATE_1   simulation start date formatted as YYYY-MM-DD-HH
    --end_date DATE_2     simulation end date formatted as YYYY-MM-DD-HH
    --run_length dt       sets simulation length if end_date not specified or run length
                          between restarts otherwise
                          dt is of the form 'N1yN2m', 'N1y', 'N2m' or 'N3d'
                          N1, N2 and N4 being arbitrary integers (N2>12 possible) and
                          'y', 'm' and 'd' standing for years, months and days
    --cos_in COS_IN       COSMO input files directory (default: ./COSMO_input)
    --cos_nml COS_NML     COSMO namelists directory (default: ./COSMO_nml)
    --cos_exe COS_EXE     path to COSMO executable (default: ./cosmo)
    --cesm_in CESM_IN     CESM input files directory (default: ./CESM_input)
    --cesm_nml CESM_NML   CESM namelists directory (default: ./CESM_nml)
    --cesm_exe CESM_EXE   CESM executable (default: ./cesm.exe)
    --oas_in OAS_IN       OASIS input files directory (default: ./OASIS_input)
    --oas_nml OAS_NML     OASIS namelists directory (default: ./OASIS_nml)
    --ncosx NCOSX         number of subdomains along the 'x-axis'
                          for COSMO domain decomposition (type: int, default: from INPUT_ORG namelist)
    --ncosy NCOSY         number of subdomains along the 'y-axis'
                          for COSMO domain decomposition (type: int, default: from INPUT_ORG namelist)
    --ncosio NCOSIO       number of cores dedicated to i/o work'
                          (type: int, default: from INPUT_ORG namelist)
    --ncesm NCESM         number of subdomains for CESM domain decomposition'
                          (type: int, default: from drv_in namelist)
    --gpu_mode GPU_MODE   run COSMO on gpu (type: bool, using anything Python can parse as a boolean,
                          default: False)
    --dummy_day DUMMY_DAY
                          perform a dummy day run after end of simulation to get last COSMO output.
                          (type: bool, using anything Python can parse as a boolean, default: True)
    --input_type {file,symlink}
                          default: file
    --transfer_all TRANSFER_ALL
                          Transfer all model input files at once before starting the simulation
                          (type: bool, using anything Python can parse as a boolean, default: True)
    --run_time RUN_TIME   reserved time on compute nodes
                          (default: '24:00:00' on daint, '08:00:00' on mistral)
    --transfer_time TRANSFER_TIME
                          reserved time for transfer job (default: '02:00:00')
    --archive_time ARCHIVE_TIME
                          reserved time for archive job (default: '03:00:00')

  slurm:
    Options specific to the slurm workload manager.
    (common to all machines using the slurm scheduler)

    --account ACCOUNT     account to use for batch script
                          (default: infered from $PROJECT on daint, None on mistral)
    --partition PARTITION
                          select a queue (default: None)

  daint:
    Options specific to the Piz Daint machine

    --modules_opt {switch,none,purge}
                          option for loading modules at run time (default: switch)
    --pgi_version PGI_VERSION
                          specify pgi compiler version at run time (default: None)
    --shebang SHEBANG     submit script shebang (default: #!/bin/bash)
    --archive_per_month ARCHIVE_PER_MONTH
                          submit one archiving job per month. For massive output simulations.
                          (type: bool, using anything Python can parse as a boolean, default: False)
    --archive_compression {none,gzip,bzip2}
                          select the compression algorithm (default: 'gzip')

  cmd line:
    Options only avialble to the command line (no xml)

    --no_submit           do not submit job after setup
                          only command line argument, cannot be set in xml file
    --gen_oasis           generate OASIS auxiliary files
                          note that OASIS will crash after producing the files
                          only command line argument, cannot be set in xml file
#+end_src
